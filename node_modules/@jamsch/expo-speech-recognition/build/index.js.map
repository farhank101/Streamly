{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,2BAA2B,EAC3B,kCAAkC,GACnC,MAAM,+BAA+B,CAAC;AAIvC,oCAAoC;AACpC,OAAO,EACL,wBAAwB,EACxB,oBAAoB,EACpB,wBAAwB,GACzB,MAAM,4BAA4B,CAAC;AAEpC,gBAAgB;AAChB,OAAO,EACL,2BAA2B,EAC3B,kCAAkC,GACnC,MAAM,+BAA+B,CAAC;AAEvC,QAAQ;AACR,OAAO,EAAE,yBAAyB,EAAE,MAAM,6BAA6B,CAAC;AAExE,YAAY;AACZ,OAAO,EACL,sBAAsB,EACtB,6BAA6B,EAC7B,kBAAkB,EAClB,kCAAkC,EAClC,oCAAoC,EACpC,oBAAoB,EACpB,WAAW,GACZ,MAAM,aAAa,CAAC;AAErB,MAAM,CAAC,MAAM,mBAAmB,GAAG,CAAC,OAEnC,EAAE,EAAE,CAAC,2BAA2B,CAAC,mBAAmB,CAAC,OAAO,IAAI,EAAE,CAAC,CAAC;AAErE,MAAM,CAAC,MAAM,4BAA4B,GACvC,2BAA2B,CAAC,4BAA4B,CAAC;AAE3D,MAAM,CAAC,MAAM,2BAA2B,GACtC,2BAA2B,CAAC,2BAA2B,CAAC;AAE1D,MAAM,CAAC,MAAM,iBAAiB,GAAG,2BAA2B,CAAC,iBAAiB,CAAC;AAE/E,MAAM,CAAC,MAAM,cAAc,GAAG,2BAA2B,CAAC,cAAc,CAAC;AAEzE,MAAM,CAAC,MAAM,oCAAoC,GAC/C,2BAA2B,CAAC,oCAAoC,CAAC;AAEnE,MAAM,CAAC,MAAM,wBAAwB,GACnC,2BAA2B,CAAC,wBAAwB,CAAC;AAEvD,MAAM,CAAC,MAAM,4BAA4B,GAAG,CAG1C,SAAY,EACZ,QAA8D,EAC9D,EAAE,CAAC,kCAAkC,CAAC,WAAW,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC","sourcesContent":["import {\n  ExpoSpeechRecognitionModule,\n  ExpoSpeechRecognitionModuleEmitter,\n} from \"./ExpoSpeechRecognitionModule\";\n\nimport type { ExpoSpeechRecognitionNativeEventMap } from \"./ExpoSpeechRecognitionModule.types\";\n\n// Export the SpeechRecognition APIs\nexport {\n  ExpoWebSpeechRecognition,\n  ExpoWebSpeechGrammar,\n  ExpoWebSpeechGrammarList,\n} from \"./ExpoWebSpeechRecognition\";\n\n// Native module\nexport {\n  ExpoSpeechRecognitionModule,\n  ExpoSpeechRecognitionModuleEmitter,\n} from \"./ExpoSpeechRecognitionModule\";\n\n// Hooks\nexport { useSpeechRecognitionEvent } from \"./useSpeechRecognitionEvent\";\n\n// Constants\nexport {\n  AVAudioSessionCategory,\n  AVAudioSessionCategoryOptions,\n  AVAudioSessionMode,\n  RecognizerIntentExtraLanguageModel,\n  RecognizerIntentEnableLanguageSwitch,\n  AudioEncodingAndroid,\n  TaskHintIOS,\n} from \"./constants\";\n\nexport const getSupportedLocales = (options?: {\n  androidRecognitionServicePackage?: string;\n}) => ExpoSpeechRecognitionModule.getSupportedLocales(options ?? {});\n\nexport const getSpeechRecognitionServices =\n  ExpoSpeechRecognitionModule.getSpeechRecognitionServices;\n\nexport const supportsOnDeviceRecognition =\n  ExpoSpeechRecognitionModule.supportsOnDeviceRecognition;\n\nexport const supportsRecording = ExpoSpeechRecognitionModule.supportsRecording;\n\nexport const setCategoryIOS = ExpoSpeechRecognitionModule.setCategoryIOS;\n\nexport const getAudioSessionCategoryAndOptionsIOS =\n  ExpoSpeechRecognitionModule.getAudioSessionCategoryAndOptionsIOS;\n\nexport const setAudioSessionActiveIOS =\n  ExpoSpeechRecognitionModule.setAudioSessionActiveIOS;\n\nexport const addSpeechRecognitionListener = <\n  T extends keyof ExpoSpeechRecognitionNativeEventMap,\n>(\n  eventName: T,\n  listener: (ev: ExpoSpeechRecognitionNativeEventMap[T]) => void,\n) => ExpoSpeechRecognitionModuleEmitter.addListener(eventName, listener);\n\nexport {\n  type ExpoSpeechRecognitionOptions,\n  type AndroidIntentOptions,\n  type ExpoSpeechRecognitionNativeEventMap,\n  type AVAudioSessionCategoryOptionsValue,\n  type AVAudioSessionModeValue,\n  type AVAudioSessionCategoryValue,\n  type AudioEncodingAndroidValue,\n  type AudioSourceOptions,\n  type RecordingOptions,\n  type IOSTaskHintValue,\n  type SetCategoryOptions,\n  type ExpoSpeechRecognitionErrorCode,\n} from \"./ExpoSpeechRecognitionModule.types\";\n"]}