{"version":3,"file":"ExpoSpeechRecognitionModule.web.js","sourceRoot":"","sources":["../src/ExpoSpeechRecognitionModule.web.ts"],"names":[],"mappings":"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","sourcesContent":["import type { PermissionResponse } from \"expo-modules-core\";\nimport type {\n  ExpoSpeechRecognitionModuleType,\n  ExpoSpeechRecognitionNativeEventMap,\n} from \"./ExpoSpeechRecognitionModule.types\";\n\nlet _speechRecognitionRef: SpeechRecognition | null = null;\n\n// It loads the native module object from the JSI or falls back to\n// the bridge module (from NativeModulesProxy) if the remote debugger is on.\nexport const ExpoSpeechRecognitionModule: ExpoSpeechRecognitionModuleType = {\n  start: (options) => {\n    const SpeechRecognitionClass =\n      typeof webkitSpeechRecognition !== \"undefined\"\n        ? webkitSpeechRecognition\n        : SpeechRecognition;\n    _speechRecognitionRef = new SpeechRecognitionClass();\n    _speechRecognitionRef.lang = options.lang ?? \"en-US\";\n    _speechRecognitionRef.interimResults = options.interimResults ?? false;\n    _speechRecognitionRef.maxAlternatives = options.maxAlternatives ?? 1;\n    _speechRecognitionRef.continuous = options.continuous ?? false;\n\n    // Re-subscribe to events so that we don't lose them\n    // This covers the case where the user has already subscribed to an event prior to calling `start()`\n    ExpoSpeechRecognitionModuleEmitter._nativeListeners.forEach(\n      (listeners, eventName) => {\n        for (const listener of listeners) {\n          // May already be subscribed\n          _speechRecognitionRef?.removeEventListener(eventName, listener);\n          _speechRecognitionRef?.addEventListener(eventName, listener);\n        }\n      },\n    );\n\n    // Start the speech recognition!\n    _speechRecognitionRef.start();\n  },\n  getStateAsync: () => {\n    console.warn(\n      \"getStateAsync is not supported on web. Returning 'inactive'.\",\n    );\n    return Promise.resolve(\"inactive\");\n  },\n  stop: () => _speechRecognitionRef?.stop(),\n  abort: () => _speechRecognitionRef?.abort(),\n  requestPermissionsAsync: () => {\n    return Promise.resolve({\n      granted: true,\n      canAskAgain: false,\n      expires: \"never\",\n      status: \"granted\",\n    } as PermissionResponse);\n  },\n  getPermissionsAsync: () => {\n    console.warn(\n      \"getPermissionsAsync is not supported on web. Returning a denied permission response.\",\n    );\n    return Promise.resolve({\n      granted: false,\n      canAskAgain: false,\n      expires: \"never\",\n      status: \"denied\",\n    } as PermissionResponse);\n  },\n  getSupportedLocales: async () => {\n    console.warn(\n      \"getSupportedLocales is not supported on web. Returning an empty array.\",\n    );\n    return {\n      locales: [] as string[],\n      installedLocales: [] as string[],\n    };\n  },\n  addListener: () => {\n    console.warn(\n      \"addListener is not supported. Use ExpoSpeechRecognitionModuleEmitter(eventName, listener) instead.\",\n    );\n  },\n  removeListeners: () => {\n    console.warn(\n      \"removeListeners is not supported. Use ExpoSpeechRecognitionModuleEmitter.removeListener(eventName, listener) instead.\",\n    );\n  },\n  getSpeechRecognitionServices: () => {\n    console.warn(\n      \"getSpeechRecognitionServices is not supported on web. Returning an empty array.\",\n    );\n    return [] as string[];\n  },\n  getDefaultRecognitionService: () => {\n    console.warn(\n      \"getDefaultRecognitionService is not supported on web. Returning an empty object.\",\n    );\n    return {\n      packageName: \"\",\n    };\n  },\n  getAssistantService: () => {\n    console.warn(\n      \"getAssistantService is not supported on web. Returning an empty object.\",\n    );\n    return {\n      packageName: \"\",\n    };\n  },\n  supportsOnDeviceRecognition: () => {\n    console.warn(\n      \"supportsOnDeviceRecognition is not supported on web. Returning false.\",\n    );\n    return false;\n  },\n  supportsRecording: () => {\n    return false;\n  },\n  androidTriggerOfflineModelDownload: () => {\n    console.warn(\n      \"androidTriggerOfflineModelDownload is not supported on web. Returning false.\",\n    );\n    return Promise.resolve({\n      status: \"opened_dialog\",\n      message: \"Offline model download is not supported on web.\",\n    });\n  },\n  setCategoryIOS: () => {\n    console.warn(\"setCategoryIOS is not supported on web.\");\n  },\n  getAudioSessionCategoryAndOptionsIOS: () => {\n    console.warn(\n      \"getAudioSessionCategoryAndOptionsIOS is not supported on web.\",\n    );\n    return {\n      category: \"playAndRecord\",\n      categoryOptions: [\"defaultToSpeaker\", \"allowBluetooth\"],\n      mode: \"measurement\",\n    };\n  },\n  setAudioSessionActiveIOS: () => {\n    console.warn(\"setAudioSessionActiveIOS is not supported on web.\");\n  },\n};\n\n/**\n * Convert the web SpeechRecognitionEventMap to the native event map for compatibility\n */\nconst webToNativeEventMap: {\n  [K in keyof SpeechRecognitionEventMap]: (\n    ev: SpeechRecognitionEventMap[K],\n  ) => ExpoSpeechRecognitionNativeEventMap[K];\n} = {\n  audioend: (ev) => ({ uri: null }),\n  audiostart: (ev) => ({ uri: null }),\n  end: (ev) => null,\n  error: (ev) => ({ error: ev.error, message: ev.message }),\n  nomatch: (ev) => null,\n  result: (ev) => {\n    const nativeResults: ExpoSpeechRecognitionNativeEventMap[\"result\"][\"results\"] =\n      [];\n\n    for (let i = 0; i < ev.results[ev.resultIndex].length; i++) {\n      const result = ev.results[ev.resultIndex][i];\n      nativeResults.push({\n        transcript: result.transcript,\n        confidence: result.confidence,\n        segements: [],\n      });\n    }\n\n    return {\n      isFinal: Boolean(ev.results[ev.resultIndex]?.isFinal),\n      results: nativeResults,\n    };\n  },\n  soundstart: (ev) => null,\n  speechend: (ev) => null,\n  speechstart: (ev) => null,\n  start: (ev) => null,\n  soundend: (ev) => null,\n};\nexport const ExpoSpeechRecognitionModuleEmitter = {\n  _nativeListeners: new Map() as Map<string, Set<(event: any) => void>>,\n  _clientListeners: new Map() as Map<\n    // Original listener\n    (event: any) => void,\n    // Native listener\n    (event: any) => void\n  >,\n  addListener<T extends keyof SpeechRecognitionEventMap>(\n    eventName: T,\n    listener: (ev: ExpoSpeechRecognitionNativeEventMap[T]) => void,\n  ) {\n    // Convert the web event to the native event\n    const nativeListener = (ev: SpeechRecognitionEventMap[T]) => {\n      const eventPayload = webToNativeEventMap[eventName]?.(ev);\n      listener(eventPayload);\n    };\n\n    _speechRecognitionRef?.addEventListener(eventName, nativeListener);\n    if (!ExpoSpeechRecognitionModuleEmitter._nativeListeners.has(eventName)) {\n      ExpoSpeechRecognitionModuleEmitter._nativeListeners.set(\n        eventName,\n        new Set(),\n      );\n    }\n    // Add the original listener to the enhanced listeners\n    ExpoSpeechRecognitionModuleEmitter._nativeListeners\n      .get(eventName)\n      ?.add(nativeListener);\n\n    // Map the original listener to the enhanced listener\n    ExpoSpeechRecognitionModuleEmitter._clientListeners.set(\n      listener,\n      nativeListener,\n    );\n\n    return {\n      remove: () => {\n        _speechRecognitionRef?.removeEventListener(eventName, nativeListener);\n        ExpoSpeechRecognitionModuleEmitter._nativeListeners\n          .get(eventName)\n          ?.delete(nativeListener);\n        ExpoSpeechRecognitionModuleEmitter._clientListeners.delete(listener);\n      },\n    };\n  },\n  removeListener: (eventName: string, listener: (event: any) => void) => {\n    const resolvedListener =\n      ExpoSpeechRecognitionModuleEmitter._clientListeners.get(listener) ??\n      listener;\n\n    _speechRecognitionRef?.removeEventListener(eventName, resolvedListener);\n    if (ExpoSpeechRecognitionModuleEmitter._nativeListeners.has(eventName)) {\n      ExpoSpeechRecognitionModuleEmitter._nativeListeners\n        .get(eventName)\n        ?.delete(listener);\n    }\n    ExpoSpeechRecognitionModuleEmitter._clientListeners.delete(listener);\n  },\n  removeAllListeners: (eventName: string) => {\n    // Go through _listeners and remove all listeners for this event\n    if (ExpoSpeechRecognitionModuleEmitter._nativeListeners.has(eventName)) {\n      const nativeListeners =\n        ExpoSpeechRecognitionModuleEmitter._nativeListeners.get(eventName);\n      if (!nativeListeners) {\n        return;\n      }\n\n      // Remove the enhanced listeners\n      for (const [\n        listener,\n        nativeListener,\n      ] of ExpoSpeechRecognitionModuleEmitter._clientListeners) {\n        // if nativeListener in listeners, remove it\n        if (nativeListeners.has(nativeListener)) {\n          // Remove the enhanced listener\n          ExpoSpeechRecognitionModuleEmitter._clientListeners.delete(listener);\n        }\n      }\n\n      // Remove the native listeners\n      for (const listener of nativeListeners) {\n        ExpoSpeechRecognitionModuleEmitter.removeListener(eventName, listener);\n      }\n\n      // Clean up\n      ExpoSpeechRecognitionModuleEmitter._nativeListeners.delete(eventName);\n    }\n  },\n};\n"]}